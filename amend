#!/usr/bin/env lua5.3

local copyright = "Copyright (C) 2021-2022 Yogev Sawa"
local license = "UNLICENSE (see <http://unlicense.org/>)" -- see below
local invocation = "amend [<options>...]"
local version = "0.90"
local description = "Utility for revising source code."
local usage = {[[
    This tool must be executed inside the source code tree where it 
    expects to find '.amend/project.lua' in the top source folder.
    For details, see possibly accompanied 'amend/README.md' and 
    online documentation at https://fromsawa.github.io/amend/.

Options:
    --help                       show this help
    --version                    show amend version
    --verbose=value              set verbosity (use help for a list)
    <component> [arguments]      execute a component or command
]]}

--[[>>[amend.license] UNLICENSE

    This is free and unencumbered software released into the public domain.
    
    Anyone is free to copy, modify, publish, use, compile, sell, or
    distribute this software, either in source code form or as a compiled
    binary, for any purpose, commercial or non-commercial, and by any
    means.

    In jurisdictions that recognize copyright laws, the author or authors
    of this software dedicate any and all copyright interest in the
    software to the public domain. We make this dedication for the benefit
    of the public at large and to the detriment of our heirs and
    successors. We intend this dedication to be an overt act of
    relinquishment in perpetuity of all present and future rights to this
    software under copyright law.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

    For more information, please refer to <http://unlicense.org/>
]]

setmetatable(usage, {
    __call = function(self, full)
        local printf = function(fmt, ...)
            io.write(string.format(fmt, ...))
        end

        printf([[
Amend v%s
%s
License: %s

%s

Invocation:
    %s

Usage:
%s
]], version, copyright, license, description, invocation, self[1])

        if full then
            component.help()
        end
    end
})

-- >>[amend.api.lua.package] Lua ''package'' extensions.
-- 
-- **Note**:<br/>
-- In addition to standard [Lua](https://github.com/lua/lua/blob/master/luaconf.h) conventions,
-- here, also the ''?/__init.lua'' file is searched. 
-- 
-- {
local dirsep = package.config:sub(1, 1)
local pathsep = package.config:sub(3, 3)
local modulemark = package.config:sub(5, 5)
local dotlua = ".lua"

local package_path_stack = {}
local package_meta = {
    --- Add search directory to script search path.
    -- 
    -- `package:addpath(path)`
    addpath = function(_, dir)
        local newpath = table.concat({dir, modulemark}, dirsep) .. dotlua .. pathsep ..
                            table.concat({dir, modulemark, "init"}, dirsep) .. dotlua .. pathsep ..
                            table.concat({dir, modulemark, "__init"}, dirsep) .. dotlua
        package.path = newpath .. pathsep .. package.path

        -- also update push/pop stack
        for i, p in ipairs(package_path_stack) do
            package_path_stack[i] = newpath .. pathsep .. package_path_stack[i]
        end
    end,
    --- Temporarily add a script search path. 
    --
    --`package:pushpath(path)`
    pushpath = function(_, dir)
        table.insert(package_path_stack, package.path)
        local newpath = table.concat({dir, modulemark}, dirsep) .. dotlua .. pathsep ..
                            table.concat({dir, modulemark, "init"}, dirsep) .. dotlua .. pathsep ..
                            table.concat({dir, modulemark, "__init"}, dirsep) .. dotlua
        package.path = newpath .. pathsep .. package.path
    end,
    --- Remove previously added script search path.
    -- 
    -- `package:poppath()`
    poppath = function(_)
        local n = #package_path_stack
        if n > 0 then
            package.path = package_path_stack[n]
            table.remove(package_path_stack)
        end
    end
}
package_meta.__index = package_meta
setmetatable(package, package_meta)
-- }

-- >>[amend.api.globals] Global variables.
--
-- The following global variables are set or determined at startup:
--
--      EXECDIR             Path, where ''amend.lua'' was started.
--      ROOTDIR             Project root (where ''.amend/project.lua'' was found).
--      PROJECTFILE         Full path to the ''.amend/project.lua'' file.
--
-- To separate source from other files, the variable
--
--      IGNORE              Files or directories generally to ignore.
-- 
-- is populated (regular expressions) at startup. This list is automatically
-- extended if ''amend'' finds the following files, containing wild-card patterns,
-- in the ''ROOTDIR'':
--
--      .amend/ignore
--      .gitignore
--
-- The project file contains the general configuration variables:
-- 
--      PROJECT             Project settings.
--      CONFIG              Amend settings.
--      TOOLS               System tools (see 'amend/tools.lua')
--      PATHS               Additional module paths.
--
-- See [amend.api.project] for details.

-- set EXECDIR
local lfs = require "lfs" -- amend.filesystem cannot be loaded yet
EXECDIR = lfs.currentdir()

-- find ROOTDIR/PROJECTFILE
local hasprojectfile = false
while not hasprojectfile do
    ROOTDIR = lfs.currentdir()
    PROJECTFILE = table.concat({ROOTDIR, ".amend", "project.lua"}, dirsep)
    local attr = lfs.attributes(PROJECTFILE)
    if attr then
        hasprojectfile = true
        break
    end

    -- stop condition
    lfs.chdir("..")
    if ROOTDIR == lfs.currentdir() then
        break
    end
end
lfs.chdir(EXECDIR)

-- prepare IGNORE list
IGNORE = {"[.]", "[.][.]", "[.]amend", "[.]git", "[.]gitignore"}

-- load project config
if hasprojectfile then
    dofile(PROJECTFILE)

    -- supplement search path
    for _, p in ipairs(PATHS or {}) do
        package:addpath(ROOTDIR .. dirsep .. p)
    end
end

-- initial argument parsing
local function have(t, v)
    for _, k in ipairs(t) do
        if k == v then
            return true
        end
    end
    return false
end

local opts = {}
local i = 1
while i <= #arg do
    local k = arg[i]

    if not PROJECT and have({"-h", "--help", "-help", "-?", "/h", "/?"}, k) then
        usage()
        os.exit()
    elseif have({"-u", "--update"}, k) then
        PROJECT = PROJECT or {}
        PROJECT.UPDATE = true
    elseif have({"--version"}, k) then
        print(version)
        os.exit()
    elseif k:match("^--verbose=") then
        VERBOSE = k:match("^--verbose=(.*)")
    else
        table.insert(opts, k)
    end
    i = i + 1
end

-- load modules (all go into global)
local initstatus, errmsg = pcall(require, "amend.__init")
if not initstatus then
    -- try to find from our own location
    local ownpath = lfs.symlinkattributes(arg[0]).target or arg[0]
    ownpath = ownpath:match("^(.*)[\\/][^\\/]+$") or lfs.currentdir()

    package:addpath(table.concat({ownpath, "share"}, dirsep))
    initstatus, errmsg = pcall(require, "amend.__init")

    if not initstatus then
        print(errmsg) -- FOR DEVELOPMENT ONLY
    end
end

-- bail out, if not found
if not initstatus then
    print [[
The "amend" module directory could not be found. Please check your installation.

See 'https://fromsawa.github.io/amend/#installation' for further information.
]]
    os.exit(1)
end

-- load .amend/ignore, .gitignore, etc.
fs.readwild(fs.concat(ROOTDIR, ".amend", "ignore"), IGNORE)
fs.readwild(fs.concat(ROOTDIR, ".gitignore"), IGNORE)

-- we're done, if no project file was found
if not PROJECT then
    print [[
No project found. Exiting...

See 'amend --help' for further information.
]]
    os.exit()
end

-- initialize project
require "amend.project"

-- [[ OPTIONS ]]
OPTIONS = {}
OPTIONS.interpreter = arg[-1]
OPTIONS.invocation = arg[0]

if #opts == 0 then
    OPTIONS.component = "all"
else
    for i, k in ipairs(opts) do
        if i == 1 then
            if table.has({"-h", "--help", "-help", "-?", "/h", "/?"}, k) then
                OPTIONS.component = "help"
            else
                OPTIONS.component = k
            end
        else
            table.insert(OPTIONS, k)
        end
    end
end

-- [[ COMPONENTS ]]
component.find()

-- [[ EXECUTE ]]
if OPTIONS.component == "help" then
    usage(true)
else
    package:addpath(".amend")
    component.run(OPTIONS.component)
end
